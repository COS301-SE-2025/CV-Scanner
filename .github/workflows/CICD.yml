name: CV-Scanner Deployment

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  api:
    name: Build, Test, Deploy API (Java 21)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate SQL Server exists in SQL RG
        run: |
          SERVER="${{ secrets.SQL_SERVER_NAME }}"
          RG="${{ secrets.SQL_RESOURCE_GROUP }}"
          if ! az sql server show -g "$RG" -n "$SERVER" >/dev/null 2>&1; then
            echo "ERROR: SQL server '$SERVER' not found in resource group '$RG'." >&2
            echo "Tip: Set secrets SQL_SERVER_NAME (logical server name, no domain) and SQL_RESOURCE_GROUP (e.g. CV_Scanner)." >&2
            az sql server list --query "[].{name:name, rg:resourceGroup}" -o table || true
            exit 1
          fi

      # Temporarily allow the GitHub runner IP to access Azure SQL (remove at end)
      - name: Open SQL firewall for runner IP
        id: sql_fw
        run: |
          IP=$(curl -s https://api.ipify.org)
          echo "ip=$IP" >> "$GITHUB_OUTPUT"
          az sql server firewall-rule create \
            -g "${{ secrets.SQL_RESOURCE_GROUP }}" \
            -s "${{ secrets.SQL_SERVER_NAME }}" \
            -n "gh-${GITHUB_RUN_ID}" \
            --start-ip-address "$IP" \
            --end-ip-address "$IP"

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven
          cache-dependency-path: API/api/pom.xml

      - name: Make mvnw executable
        run: chmod +x API/api/mvnw

      - name: Build & Test API against production DB
        working-directory: API/api
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
        run: |
          ./mvnw -B -ntp -DskipTests=false test
          ./mvnw -B -ntp -DskipTests package

      - name: Close SQL firewall rule
        if: always()
        run: |
          az sql server firewall-rule delete \
            -g "${{ secrets.SQL_RESOURCE_GROUP }}" \
            -s "${{ secrets.SQL_SERVER_NAME }}" \
            -n "gh-${GITHUB_RUN_ID}"

      - name: Locate API artifact
        id: api_artifact
        run: |
          JAR_PATH=$(ls -1 API/api/target/*.jar | grep -v '\.original$' | head -n 1)
          echo "jar=$JAR_PATH" >> "$GITHUB_OUTPUT"
          ls -lh "$JAR_PATH"

      - name: Deploy API (jar)
        run: |
          az webapp deploy \
            --resource-group "rg-cvscanner" \
            --name "cvscanner-api" \
            --src-path "${{ steps.api_artifact.outputs.jar }}" \
            --type jar

      - name: Configure API app settings
        run: |
          az webapp config appsettings set \
            --resource-group "rg-cvscanner" \
            --name "cvscanner-api" \
            --settings DB_URL='${{ secrets.DB_URL }}' DB_USER='${{ secrets.DB_USER }}' DB_PASS='${{ secrets.DB_PASS }}'
  ai:
    name: Deploy AI (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build AI package (skip Oryx)
        run: |
          set -e
          rm -rf ai_build
          python -m venv venv
          . venv/bin/activate
          python -m pip install --upgrade pip
          # Install dependencies into a flat folder (App Service adds /home/site/wwwroot to PYTHONPATH)
          pip install -r AI/requirements.txt -t ai_build
          # Copy application source (adjust if more files)
          cp AI/*.py ai_build/
          # Optional: include config/data folders if needed
          if [ -d AI/models ]; then cp -r AI/models ai_build/models; fi
          if [ -d AI/config ]; then cp -r AI/config ai_build/config; fi
          (cd ai_build && zip -r ../ai.zip .)
          ls -lh ai.zip

      - name: Configure AI App Service
        run: |
          az webapp config set \
            --resource-group rg-cvscanner \
            --name cvscanner-ai \
            --linux-fx-version "PYTHON|3.12" \
            --always-on true
          az webapp config appsettings set \
            --resource-group rg-cvscanner \
            --name cvscanner-ai \
            --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                     WEBSITE_RUN_FROM_PACKAGE=0 \
                     TRANSFORMERS_CACHE=/home/transformers-cache \
                     HF_HOME=/home/hf-cache \
                     WEBSITES_CONTAINER_START_TIME_LIMIT=1800
          az webapp config set \
            --resource-group rg-cvscanner \
            --name cvscanner-ai \
            --startup-file "gunicorn --workers 1 --timeout 300 --bind=0.0.0.0:\$PORT app:app"

      - name: Deploy AI (prebuilt)
        run: |
          az webapp deploy \
            --resource-group rg-cvscanner \
            --name cvscanner-ai \
            --src-path ai.zip \
            --type zip

      - name: Warm up AI
        run: |
          set -e
            HOST=$(az webapp show -g rg-cvscanner -n cvscanner-ai --query defaultHostName -o tsv)
            echo "AI host: $HOST"
            for i in {1..18}; do
              if curl -fsS -m 5 "https://${HOST}/health"; then
                echo "Health OK"
                exit 0
              fi
              sleep 5
            done
            echo "Health failed; recent logs:"
            az webapp log tail -g rg-cvscanner -n cvscanner-ai --timeout 30 || true
            exit 1

  ui:
    name: Deploy React UI (SWA)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: UI/CV-Scanner/package-lock.json

      - name: Install UI dependencies
        working-directory: UI/CV-Scanner
        run: npm ci || npm install --legacy-peer-deps

      - name: Build React UI
        working-directory: UI/CV-Scanner
        env:
          VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }} # existing
          VITE_AI_BASE_URL: ${{ secrets.VITE_AI_BASE_URL }} # add this secret (set to https://cvscanner-ai-bxf4ereygse9eqdh.southafricanorth-01.azurewebsites.net)
        run: npm run build

      - name: Verify dist exists
        run: test -f "UI/CV-Scanner/dist/index.html" && echo "dist found" || (echo "dist missing" && exit 1)

      - name: Deploy React UI to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.UI_STATIC_WEBAPP_API_TOKEN }}
          action: "upload"
          app_location: "UI/CV-Scanner/dist"
          skip_app_build: true
